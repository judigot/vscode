// Place your key bindings in this file to overwrite the defaults
// If there are similar bindings, place the ones with conditions below the ones without (e.g. Git: Save Changes)
[
  {
    "key": "ctrl+shift+v",
    "command": "quicktype.pasteJSONAsTypesAndSerialization",
    "when": "editorTextFocus && editorLangId != markdown"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-quicktype.pasteJSONAsTypesAndSerialization",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+alt+v",
    "command": "quicktype.pasteJSONAsTypes",
    "when": "editorTextFocus && editorLangId != markdown"
  },
  {
    "key": "ctrl+shift+alt+v",
    "command": "-quicktype.pasteJSONAsTypes",
    "when": "editorTextFocus"
  },
  /*==========RESOLVE MARKDOWN PREVIEW & PAST JSON AS CODE CONFLICT==========*/
  {
    "key": "shift+alt+f",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "editor.action.formatDocument",
        "typescript.removeUnusedImports",
        "javascript.removeUnusedImports",
        "eslint.executeAutofix",
        "editor.action.formatDocument"
      ]
    },
    "when": "editorTextFocus && !editorReadonly && (editorLangId == typescript || editorLangId == typescriptreact || editorLangId == javascript || editorLangId == javascriptreact)"
  },
  {
    "key": "ctrl+shift+alt+backspace",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "clear\n"
    }
  },
  {
    "key": "shift+alt+c",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": ["editor.action.commentLine", "copyFilePath"]
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+v",
    "command": "toggleVim"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+alt+t",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.files.newUntitledFile",
        "workbench.action.editor.changeLanguageMode"
      ]
    }
  },
  {
    "key": "shift+alt+t",
    "command": "quokka.createFile"
  },
  {
    "key": "ctrl+shift+alt+up",
    "command": "cursorTop",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "cursorBottom",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+,",
    "command": "editor.action.sortLinesAscending"
  },
  {
    "key": "ctrl+shift+alt+.",
    "command": "editor.action.sortLinesDescending"
  },
  {
    "key": "ctrl+shift+r",
    "command": "editor.action.quickFix"
  },
  {
    "key": "ctrl+shift+alt+r",
    "command": "editor.action.sourceAction"
  },
  {
    "key": "ctrl+alt+c",
    "command": "code-runner.run"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "git pull\n"
    }
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "git stash -u\n"
    }
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "git stash pop\n"
    }
  },
  {
    "key": "f9",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "clear && NODE_ENV=production node dist/index.js\n"
    }
  },
  {
    "key": "f10",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "clear && NODE_ENV=development npx nodemon --exec ts-node -r tsconfig-paths/register src/index.ts\n"
    }
  },
  {
    "key": "ctrl+f9",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "clear && npx webpack --env buildType=production --mode production & npx babel --extensions '.tsx,.ts,.jsx,.js' src --ignore src/components,src/config,src/migrations,src/models,src/public,src/seeders,src/tests -d dist && NODE_ENV=production node dist/index.js\n"
    }
  },
  {
    "key": "ctrl+f10",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "clear && npx webpack --env buildType=development --mode development & NODE_ENV=development npx nodemon --exec ts-node -r tsconfig-paths/register src/index.ts\n"
    }
  },
  {
    "key": "f9",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.terminal.focus",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "clear && NODE_ENV=production node dist/index.js\n"
          }
        }
      ]
    },
    "when": "!terminalFocus"
  },
  {
    "key": "f10",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.terminal.focus",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "clear && NODE_ENV=development npx nodemon --exec ts-node -r tsconfig-paths/register src/index.ts\n"
          }
        }
      ]
    },
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+f9",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.terminal.focus",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "clear && npx webpack --env buildType=production --mode production & npx babel --extensions '.tsx,.ts,.jsx,.js' src --ignore src/components,src/config,src/migrations,src/models,src/public,src/seeders,src/tests -d dist && NODE_ENV=production node dist/index.js\n"
          }
        }
      ]
    },
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+f10",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.action.terminal.focus",
        {
          "command": "workbench.action.terminal.sendSequence",
          "args": {
            "text": "clear && npx webpack --env buildType=development --mode development & NODE_ENV=development npx nodemon --exec ts-node -r tsconfig-paths/register src/index.ts\n"
          }
        }
      ]
    },
    "when": "!terminalFocus"
  },
  {
    /*************************
     * GIT: CLONE REPOSITORY *
     *************************/
    "key": "ctrl+shift+alt+c",
    "command": "type",
    "args": {
      "text": "git clone https://github.com/judigot/repository .\ngit status\n"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    /*********************
     * GIT: SAVE CHANGES *
     *********************/
    "key": "ctrl+shift+alt+s",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "git add .\ngit commit -m \"Commit\"\ngit push origin\ngit status\n"
    }
  },
  {
    // Paste git command on editor
    "key": "ctrl+shift+alt+s",
    "command": "type",
    "args": {
      "text": "git add .\ngit commit -m \"Commit\"\ngit push origin\ngit status\n"
    },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    /*********************
     * GIT: CHECK STATUS *
     *********************/
    "key": "ctrl+shift+alt+/",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "git status\n"
    }
  }
]

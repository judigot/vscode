{
  /*====================EXTENSIONS====================*/ /*
  Auto Close Tag - don't delete; autocloses HTML tags even in a string
  Auto Rename Tag - don't delete; autorenames HTML tags inside PHP files
  AWS Toolkit
  Backticks
  Bash IDE
  Bookmarks
  Code Runner
  Code Spell Checker
  Comment Box
  Compare Folders
  CSS Peek
  Dev Containers
  Docker
  Deno for VSCode
  DotENV
  EJS language support
  Error Lens
  ES7+ React/Redux/React-Native snippets
  ESLint
  GitLens - Git supercharged
  GraphQL: Language Feature Support
  GraphQL: Syntax Highlighting
  HashiCorp Terraform
  HTML CSS Support
  html to JSX
  Import Cost
  indent-rainbow
  Inline SQL
  IntelliCode
  IntelliCode API Usage Examples
  isort
  JavaScript (ES6) code snippets
  Jupyter
  Jupyter Cell Tags
  Jupyter Keymap
  Jupyter Notebook Renderers
  Jupyter Slide Show
  Live Server
  Local History
  Markdown All in One
  multi-command
  NGINX Configuration Language Support
  Paste HTML as JSX
  Paste JSON as Code
  PHP Debug
  PHP Extension Pack
  PHP Intelephense
  Prettier - Code formatter
  Pretty TypeScript Errors
  Prisma
  Project Manager
  Pylance
  Python
  Quokka.js
  Rainbow CSV
  Remote - SSH
  Remote - SSH: Editing Configuration Files
  Remote Explorer
  Rest Client
  ShellCheck
  shell-format
  Spring Boot Extension Pack
  SQLTools
  SQLTools MySQL/MariaDB/TiDB
  Tabnine
  Tailwind CSS IntelliSense
  TypeScript Explicit Types
  VSCode React Refactor
  vscode-icons
  vscode-styled-components
  WSL
  XML Tools
  /*====================EXTENSIONS====================*/
  "workbench.colorTheme": "Default Dark Modern",
  "workbench.preferredDarkColorTheme": "Default Dark Modern",
  "workbench.preferredLightColorTheme": "Default Dark Modern",
  // "terminal.integrated.defaultProfile.windows": "Git Bash",
  "terminal.integrated.defaultProfile.windows": "MSYS2",
  "terminal.integrated.profiles.windows": {
    "Git Bash": {
      "path": ["C:/apportable/Programming/PortableGit/bin/bash.exe"],
      "env": {
        "HOME": "C:/Users/${env:USERNAME}", // Uses the .bashrc located at C:/Users/${env:USERNAME}
        "MSYSTEM": "MSYS",
        "CHERE_INVOKING": "1" // Start the terminal in the directory from which it was launched
      },
      "color": "terminal.ansiRed",
      "icon": "terminal-bash",
      "overrideName": true
    },
    "ZSH": {
      "path": "C:/apportable/Programming/msys64/usr/bin/bash.exe",
      "args": ["--login", "-i", "-c", "zsh"],
      "env": {
        "HOME": "C:/Users/${env:USERNAME}", // Uses the .bashrc located at C:/Users/${env:USERNAME}
        "MSYSTEM": "MSYS",
        "CHERE_INVOKING": "1" // Start the terminal in the directory from which it was launched
      },
      "color": "terminal.ansiCyan",
      "icon": "terminal-bash",
      "overrideName": true
    },
    "MSYS2": {
      "path": "C:/apportable/Programming/msys64/usr/bin/bash.exe",
      "args": ["--login", "-i"],
      "env": {
        "HOME": "C:/Users/${env:USERNAME}", // Uses the .bashrc located at C:/Users/${env:USERNAME}
        "MSYSTEM": "MSYS",
        "CHERE_INVOKING": "1" // Start the terminal in the directory from which it was launched
      },
      "color": "terminal.ansiMagenta",
      "icon": "terminal-bash",
      "overrideName": true
    },
    "MSYS2 (MSYS2 Environment)": {
      "path": "C:/apportable/Programming/msys64/usr/bin/bash.exe",
      "args": ["--login", "-i"],
      "env": {
        "HOME": "C:/apportable/Programming/msys64/home/${env:USERNAME}",
        "MSYSTEM": "MSYS",
        "CHERE_INVOKING": "1"
      },
      "color": "terminal.ansiYellow",
      "icon": "terminal-bash",
      "overrideName": true
    }
  },
  "terminal.integrated.env.windows": {
    // PATH variable is set in C:/Users/${env:USERNAME}/.bashrc
    // "SAMPLE_ENV": "",
    "PATH": "${env:PATH}:/c/apportable/Programming/PortableGit/cmd:/c/apportable/Programming/deno:/c/apportable/Programming/nvm:/c/apportable/Programming/nodejs:/c/apportable/Programming/nodejs/node_modules/npm/bin:/c/apportable/Programming/jdk/bin:/c/apportable/Programming/sqlite:/c/apportable/Programming/terraform:/c/apportable/Programming/pulumi/bin:/c/Users/${env:USERNAME}/AppData/Local/Programs/Microsoft VS Code/bin:/c/Program Files/Docker/Docker/resources/bin:/c/ProgramData/DockerDesktop/version-bin:"
  },
  "vitest.nodeExecutable": "C:/apportable/Programming/nodejs/node.exe",
  "vitest.nodeEnv": {
    "PATH": "${env:PATH}:/c/apportable/Programming/PortableGit/cmd:/c/apportable/Programming/deno:/c/apportable/Programming/nvm:/c/apportable/Programming/nodejs:/c/apportable/Programming/nodejs/node_modules/npm/bin:/c/apportable/Programming/jdk/bin:/c/apportable/Programming/sqlite:/c/apportable/Programming/terraform:/c/apportable/Programming/pulumi/bin:/c/Users/${env:USERNAME}/AppData/Local/Programs/Microsoft VS Code/bin:/c/Program Files/Docker/Docker/resources/bin:/c/ProgramData/DockerDesktop/version-bin:"
  },
  "java.jdt.ls.java.home": "C:/apportable/Programming/jdk",
  "git.path": "C:/apportable/Programming/PortableGit/bin/git.exe",
  // Run updates only on VS Code startup
  "update.mode": "default",
  "local-history.path": "C:/apportable/App Data/VS Code",

  "workbench.startupEditor": "newUntitledFile",
  "sync.autoDownload": true,
  "sync.autoUpload": true,
  // "sync.forceUpload": true,
  "sync.quietSync": true,
  "deno.path": "C:/apportable/Programming/deno/deno.exe",
  "php.validate.executablePath": "C:/apportable/Programming/php/php.exe",
  "php.executablePath": "C:/apportable/Programming/php/php.exe",
  "php.suggest.basic": true,
  // Enable/disable built-in PHP validation.
  "php.validate.enable": true, // docker exec -i <PHP container name> php %*
  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave",
  "workbench.iconTheme": "vscode-icons",
  "vsicons.dontShowNewVersionMessage": true,
  "git.ignoreMissingGitWarning": true,
  // "editor.formatOnSave": true,
  // "editor.formatOnPaste": true,
  // "editor.formatOnType": true,
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[php]": {
    "editor.defaultFormatter": "bmewburn.vscode-intelephense-client"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[scss]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[dockercompose]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-docker"
  },
  "[nginx]": {
    "editor.defaultFormatter": "ahmadalli.vscode-nginx-conf"
  },
  "[shellscript]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "editor.codeActionsOnSave": {
    "source.addMissingImports.ts": "always",
    "source.fixAll.eslint": "always",
    "source.fixAll.ts": "always",
    "source.removeUnusedImports": "always"
    // "source.sortImports": "always"
    // "source.organizeImports": "always"
  },
  "editor.linkedEditing": true,
  // Prevent autocomplete when pressing "."
  "editor.acceptSuggestionOnCommitCharacter": false,
  "liveServer.settings.donotShowInfoMsg": true,
  "cSpell.userWords": ["chunkhash", "jsxdev", "nodir", "purgecss", "tanstack"],
  "cSpell.diagnosticLevel": "Hint",
  "workbench.colorCustomizations": {
    "editorHint.foreground": "#FFA500"
  },
  "files.restoreUndoStack": false,
  "files.exclude": {
    "**/.terraform/**": true,
    "**/.terraform.lock.hcl/**": true,
    "**/terraform.tfstate/**": true,
    "**/terraform.tfstate.backup/**": true,
    "**/node_modules/**": true,
    "**/src/.next/**": true,
    "**/.history": true
  },
  // Action when clicking script name
  "npm.scriptExplorerAction": "run",
  "code-runner.runInTerminal": true,
  "code-runner.executorMap": {
    "java": "clear && cd $(echo $dirWithoutTrailingSlash | sed '/\\/\\//g') && javac $fileName && java $fileNameWithoutExt",
    "javascript": "clear && if echo $fullFileName | awk '/tempCodeRunnerFile\\.(javascript|ts|tsx)/ {exit 0} {exit 1}'; then if node -e \"try {require('esbuild-register')} catch (e) {process.exit(1)}\"; then node -r esbuild-register $fullFileName; else deno run --allow-all $fullFileName; fi; else if node -e \"try {require('esbuild-register')} catch (e) {process.exit(1)}\"; then node -r esbuild-register $fullFileName; else deno run --allow-all $fullFileName; fi; fi",
    // "typescript": "clear && if echo $fullFileName | awk '/tempCodeRunnerFile\\.(javascript|ts|tsx)/ {exit 0} {exit 1}'; then if node -e \"try {require('esbuild-register')} catch (e) {process.exit(1)}\"; then node -r esbuild-register $fullFileName; else deno run --allow-all $fullFileName; fi; else if node -e \"try {require('esbuild-register')} catch (e) {process.exit(1)}\"; then node -r esbuild-register $fullFileName; else deno run --allow-all $fullFileName; fi; fi",
    "typescript": "clear && deno run --allow-all --unstable-sloppy-imports $fullFileName",
    "typescriptreact": "clear && if echo $fullFileName | awk '/tempCodeRunnerFile\\.(javascript|ts|tsx)/ {exit 0} {exit 1}'; then if node -e \"try {require('esbuild-register')} catch (e) {process.exit(1)}\"; then node -r esbuild-register $fullFileName; else deno run --allow-all $fullFileName; fi; else if node -e \"try {require('esbuild-register')} catch (e) {process.exit(1)}\"; then node -r esbuild-register $fullFileName; else deno run --allow-all $fullFileName; fi; fi",
    "python": "clear && PYTHON_VERSION=$(echo $(python3 --version || python2 --version || python --version) | awk '{split($2, a, \".\"); print a[1]}'); clear; \"python$(echo $PYTHON_VERSION)\"",
    "ruby": "clear && ruby",
    "yaml": "clear; [[ $fileName == \"docker-compose.yml\" ]] && docker compose up || { [[ $fileName == \"compose.yml\" || $fileName == \"docker-compose.\"*\".yml\" ]] && docker compose --file \"$fileName\" up; }"
  },
  // Associate file extensions to a certain language
  "files.associations": {
    "*.erb": "html",
    "*.code-snippets": "json",
    "compose*.yml": "yaml",
    "docker-compose*.yml": "yaml",
    "*.css": "tailwindcss",
    "*.scss": "scss"
  },
  "explorer.autoReveal": false, // Prevents VS Code from scrolling to the opened file when closing a another file
  "html.format.templating": true,
  "code-runner.ignoreSelection": true,
  "javascript.suggest.completeFunctionCalls": true,
  "typescript.suggest.completeFunctionCalls": true,
  "typescript.preferences.importModuleSpecifier": "non-relative", // use @/ instead of ../ in import suggestions
  "typescript.preferences.importModuleSpecifierEnding": "js", // Add file extensions to imports
  "diffEditor.ignoreTrimWhitespace": false,
  "terminal.integrated.enableMultiLinePasteWarning": "never",
  "git.autofetch": true,
  "git.autofetchPeriod": 300,
  "git.postCommitCommand": "sync",
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",
  "npm.enableRunFromFolder": true,
  // Add semicolon or not
  "prettier.semi": true,
  // User snippets suggestions at the top
  "editor.snippetSuggestions": "top",
  "explorer.compactFolders": false,
  "[python]": {
    "editor.formatOnType": true
  },
  "aws.resources.enabledResources": ["AWS::EC2::VPC"],
  "editor.smoothScrolling": true,
  "quokka.showOutputOnStart": false,
  // VS Code inside docker container doesn't fetch on file change, hence this setting
  // "json.schemaDownload.enable": false // Removes JSON schema error. Temporary fix.
  //=====FIRA CODE=====//
  "editor.fontFamily": "Fira Code",
  "editor.fontLigatures": true,
  "aws.suppressPrompts": {
    "regionAddAutomatically": true
  },
  "editor.fontWeight": "bold", // Bold
  //=====FIRA CODE=====//
  //=====BRACKET PAIR COLORIZATION=====//
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": "active",
  //=====BRACKET PAIR COLORIZATION=====//
  "settingsSync.ignoredSettings": ["-git.path"],
  "tabnine.experimentalAutoImports": true,
  "workbench.editor.tabSizing": "fixed",
  // "eslint.options": { "rules": {} } // This will override the .eslintrc.cjs file in your project so comment this out
  // Use LF rather than CRLF
  "files.eol": "\n",
  "prisma.showPrismaDataPlatformNotification": false,
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "on",
    "strings": "on"
  }
}
